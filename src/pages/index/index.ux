<template>
  <div class="demo-page">
    <scroll scroll-y="true" class="bg" id="main" >
      <div for="{{lyrics}}" class="card" id="line-{{$idx}}" onclick="next">
        <text class="title {{$item.class}}" style="{{$item.style}}" id="text-{{$idx}}">{{$item.text}}</text>
        <text class="detail" if="{{$item.translate}}">{{$item.translate}}</text>
      </div>
      <div style="height: 400px;"></div>
    </scroll>
  </div>
</template>

<script>
import asyncRun from "../../asyncRun";
import folme from "@system.folme"
import wait from "./wait"

const SCALE_FACTOR = 1.2

export default {
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
  private: {
    title: "示例页面",
    lyrics: [],
    current: 0,
  }, onInit() {
    this.lyrics = Array(20).fill(0).map((_, i) => ({ text: `第${i}行53454646464646546466546546464`, translate: i%2==0?`第${i}行描述`:"" }));
  },onReady() {
    this.measureLyricsHeights()
  },async measureLyricsHeights() {
    try {
      let top=0
      for (const [i, el] of this.lyrics.entries()){
        const res = (await asyncRun(this.$element(`line-${i}`).getBoundingClientRect))
        el.height = res.height
        top += res.height+11
        el.top = top
        asyncRun(this.$element(`text-${i}`).getBoundingClientRect).then(
          ({ height }) => {
            height+=10 // 防止最后一行不显示
            el.textHeight = height
            el.scaledHeight = height * SCALE_FACTOR
            el.style = { height: el.textHeight }
          }
        )
      }
    } catch (error) {
      console.error("测量歌词高度出错：", error)
    }
  },
  next() {
    this.deactive(this.current)
    this.current++
    this.active(this.current)
    this.scrollTo(this.current)
  },
  deactive(index) {
    this.lyrics[index].style = { height: this.lyrics[index].textHeight }
    this.lyrics[index].class = "disactive-text"
  },
  active(index) {
    this.lyrics[index].style = { height: this.lyrics[index].scaledHeight }
    this.lyrics[index].class = "active-text"
  },
  async scrollTo(index) {
    const duration = .3

    for (let i = 2; i > 0; i--) {
      if(index-i<0)continue;
      folme.to({
        id: `line-${index-i}`,
        toState: { translateY: -this.lyrics[index].height },
        config: {duration,delay:(3-i)/10},
      })
    }
    await wait(300)
    console.log(this.lyrics[index])
    this.$element("main").scrollTo({ top: this.lyrics[index].top -120, behavior: "smooth" });
    for (let i = 2; i > 0; i--) {
      if(index-i<0)continue;
      folme.to({
        id: `line-${index-i}`,
        toState: { translateY: 0, },
        config: {duration},
      })
    }
    for (let i = 1; i < 4; i++) {
      if(index+i>this.lyrics.length-1)continue;
      folme.to({
        id: `line-${index + i}`,
        toState: { translateY: this.lyrics[index].height },
        config: {duration},
      })
    }
    await wait(100)
    for (let i = 1; i < 4; i++) {
      if (index + i > this.lyrics.length - 1) continue;
      folme.to({
        id: `line-${index + i}`,
          /* fromState: { translateY: this.lyrics[index].height }, */
          toState: { translateY: 0 },
          config: {duration,delay:i/10},
      })
    }
  }
}
</script>

<style>
@import "./index.css";
</style>
